{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","breakLength","sessionLength","currentSession","timeInSeconds","isStart","intervalId","timerColor","color","playStopIcon","faPlay","alarmWarningColor","decrementBreak","bind","incrementBreak","decrementSession","incrementSession","onCountdown","toggleStartStop","switchStatus","reset","calculateMinutesAndSeconds","assignAlarmColor","this","setState","clearInterval","setInterval","faStop","audioBeep","play","pause","currentTime","minutes","Math","floor","seconds","className","name","id","incrementId","decrementId","lengthId","time","increment","decrement","status","preload","ref","audio","src","class","React","Component","ResetButton","onClick","icon","faSyncAlt","SettingComponent","faArrowDown","faArrowUp","StartStopButton","Time","style","Footer","faHeart","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.208e3680.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactFCCTest from 'react-fcctest';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faStop, faSyncAlt, faArrowUp, faArrowDown, faHeart } from '@fortawesome/free-solid-svg-icons';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      currentSession: 'session',\r\n      timeInSeconds: 25 * 60, //for debugging. Uncomment later\r\n      //timeInSeconds: 25 * 60, //seems like using sessionLength * 60 doesn't work. Yeah, I still sucks at React ðŸ˜£\r\n      isStart: 0, //either start or stop. passed to component startStop to indicate status\r\n      intervalId: null, //set intervalId to null on initial load\r\n      timerColor: { color: '#232323' }, //for fancy-styling the color during transition.\r\n      playStopIcon: faPlay, //set initial to play\r\n      alarmWarningColor: { color: '#232323' }\r\n    }\r\n\r\n    /* don't think need two separate increment & decrement functions for both break & session. \r\n    ** maybe combine them into just two functions. Question remains: how do I achieve that? Either\r\n    ** pass args or have to do some checking in the function. \r\n    ** Will do this later */\r\n    this.decrementBreak = this.decrementBreak.bind(this);\r\n    this.incrementBreak = this.incrementBreak.bind(this);\r\n    this.decrementSession = this.decrementSession.bind(this);\r\n    this.incrementSession = this.incrementSession.bind(this);\r\n    this.onCountdown = this.onCountdown.bind(this);\r\n    this.toggleStartStop = this.toggleStartStop.bind(this);\r\n    this.switchStatus = this.switchStatus.bind(this);\r\n    this.reset = this.reset.bind(this);\r\n    this.calculateMinutesAndSeconds = this.calculateMinutesAndSeconds.bind(this);\r\n    this.assignAlarmColor = this.assignAlarmColor.bind(this);\r\n  }\r\n\r\n  //can only increment and decrement if it's not starting\r\n  decrementBreak() {\r\n    if (this.state.breakLength > 1 && !this.state.isStart) {\r\n      this.setState({\r\n        breakLength: this.state.breakLength - 1\r\n      })\r\n    }\r\n  }\r\n\r\n  incrementBreak() {\r\n    if (this.state.breakLength < 60 && !this.state.isStart) {\r\n      this.setState({\r\n        breakLength: this.state.breakLength + 1\r\n      })\r\n    }\r\n  }\r\n\r\n  /* Note to self: Have to manually do the substraction/addition to the var timeInSeconds\r\n   * here, otherwise the state timeInSeconds will lag in updating its value.\r\n   * Lag here means it will update its value in the next function call instead of current call.\r\n   * \r\n   * Credit to Lam Pham's cool pomodoro clock (https://github.com/completejavascript/pomodoro-clock) \r\n   * code for helping me solve this issue \r\n   */\r\n\r\n  decrementSession() {\r\n    if (this.state.sessionLength > 1 && !this.state.isStart) {\r\n      this.setState({\r\n        sessionLength: this.state.sessionLength - 1,\r\n        timeInSeconds: (this.state.sessionLength - 1) * 60,\r\n      })\r\n    }\r\n  }\r\n\r\n  incrementSession() {\r\n    if (this.state.sessionLength < 60 && !this.state.isStart) {\r\n      this.setState({\r\n        sessionLength: this.state.sessionLength + 1,\r\n        timeInSeconds: (this.state.sessionLength + 1) * 60,\r\n      })\r\n    }\r\n  }\r\n\r\n  //Handle counting down the time by decrementing the remaining seconds by 1.\r\n  onCountdown() {\r\n    this.setState({\r\n      timeInSeconds: this.state.timeInSeconds - 1\r\n    });\r\n  }\r\n\r\n  toggleStartStop() {\r\n    if (!this.state.isStart) { //eslint suggest me using '===' instead of '=='. Guess I'll follow\r\n      this.setState({\r\n        isStart: 1, //toggle (change ðŸ˜‰) from start to stop\r\n        intervalId: setInterval(() => { //use setInterval to repeatingly call the onCountdown functionS\r\n\r\n          this.onCountdown();\r\n          this.switchStatus();\r\n        }, 1000),\r\n        playStopIcon: faStop,\r\n      });\r\n    } else {\r\n      clearInterval(this.state.intervalId); //clear intervalId and also halt the countdown\r\n      this.setState({\r\n        isStart: 0, //if 'start', ask it to 'stop'\r\n        intervalId: null, //set intervalId to null again\r\n        playStopIcon: faPlay,\r\n      })\r\n    }\r\n  }\r\n\r\n  assignAlarmColor() {\r\n    if (this.state.timeInSeconds < 60) {\r\n      this.setState({\r\n        alarmWarningColor: { color: '#f70000' }\r\n      });\r\n    } else {\r\n      this.setState({\r\n        alarmWarningColor: { color: '#232323' }\r\n      });\r\n    }\r\n  }\r\n\r\n  switchStatus() {\r\n    this.assignAlarmColor();\r\n    if (this.state.timeInSeconds < 0) { //end of session\r\n      this.audioBeep.play(); //play the audio\r\n      if (this.state.currentSession === 'break') {\r\n        this.setState({\r\n          currentSession: 'session',\r\n          timeInSeconds: this.state.sessionLength * 60,\r\n          timerColor: { color: '#232323' },\r\n          alarmWarningColor: { color: '#232323' }\r\n        })\r\n      } else if (this.state.currentSession === 'session') {\r\n        this.setState({\r\n          currentSession: 'break',\r\n          timeInSeconds: this.state.breakLength * 60,\r\n          //timerColor: { color: '#4848ff' }\r\n          timerColor: { color: '#f95738' },\r\n          alarmWarningColor: { color: '#232323' }\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  reset() {\r\n    clearInterval(this.state.intervalId); //clear intervalId, hence stop the countdown\r\n    this.audioBeep.pause(); //pause current audio\r\n    this.audioBeep.currentTime = 0; //reset the beep to start of the sound\r\n    this.setState({\r\n      //reset all to default\r\n      breakLength: 5,\r\n      sessionLength: 25,\r\n      currentSession: 'session',\r\n      timeInSeconds: 25 * 60,\r\n      isStart: 0,\r\n      intervalId: null,\r\n      timerColor: { color: '#232323' },\r\n      playStopIcon: faPlay,\r\n      alarmWarningColor: { color: '#232323' },\r\n    })\r\n  };\r\n\r\n  calculateMinutesAndSeconds() {\r\n\r\n    //Math.floor is used to cut off the trailing decimal points    \r\n    let minutes = Math.floor(this.state.timeInSeconds / 60); //convert seconds to minutes\r\n\r\n    //for seconds, subtract the remaining seconds with the exact minute * 60 (which is also seconds)\r\n    let seconds = this.state.timeInSeconds - (minutes * 60);\r\n\r\n    //simple time formatting (mm:ss)\r\n    if (minutes < 10) {\r\n      minutes = '0' + minutes; //blessing that JS is dynamic type ðŸ”¥\r\n    }\r\n\r\n    if (seconds < 10) {\r\n      seconds = '0' + seconds;\r\n    }\r\n\r\n    return `${minutes}:${seconds}`; //heard this is the best way to concat string. It looks cool though\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"app\">\r\n          {/*<DarkModeButton />*/}\r\n          <h1>Pomodoro Clock</h1>\r\n          <div className=\"control-pnl\">\r\n            <SettingComponent\r\n              name=\"Session Length\"\r\n              id=\"session-label\"\r\n              incrementId=\"session-increment\"\r\n              decrementId=\"session-decrement\"\r\n              lengthId=\"session-length\"\r\n              time={this.state.sessionLength}\r\n              increment={this.incrementSession}\r\n              decrement={this.decrementSession}\r\n            />\r\n            <SettingComponent\r\n              name=\"Break Length\"\r\n              id=\"break-label\"\r\n              incrementId=\"break-increment\"\r\n              decrementId=\"break-decrement\"\r\n              lengthId=\"break-length\"\r\n              time={this.state.breakLength}\r\n              increment={this.incrementBreak}\r\n              decrement={this.decrementBreak}\r\n            />\r\n          </div>\r\n          <div className=\"time\">\r\n            <Time\r\n              time={this.calculateMinutesAndSeconds()}\r\n              status={this.state.currentSession}\r\n              color={this.state.timerColor}\r\n              alarmWarningColor={this.state.alarmWarningColor}\r\n            />\r\n          </div>\r\n          <div className=\"bottom-pnl\">\r\n            <StartStopButton\r\n              isStart={this.state.isStart}\r\n              toggleStartStop={this.toggleStartStop}\r\n              playStopIcon={this.state.playStopIcon}\r\n            />\r\n\r\n            <ResetButton\r\n              reset={this.reset}\r\n            />\r\n          </div>\r\n          <audio id=\"beep\" preload=\"auto\" ref={audio => this.audioBeep = audio} src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\r\n          <ReactFCCTest />\r\n          <div class=\"footer\"></div>\r\n        </div >\r\n        <Footer />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass ResetButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"reset\" onClick={this.props.reset} className=\"reset-btn\">Reset <FontAwesomeIcon icon={faSyncAlt} /></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass SettingComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: this.props.time\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"name\" id={this.props.id}>{this.props.name}</div>\r\n        <div className=\"control\">\r\n          <div id={this.props.decrementId} className=\"btn\" onClick={this.props.decrement}> <FontAwesomeIcon icon={faArrowDown} /> </div>\r\n          <div className=\"control-time\" id={this.props.lengthId}>{this.props.time}  </div>\r\n          <div id={this.props.incrementId} className=\"btn\" onClick={this.props.increment}> <FontAwesomeIcon icon={faArrowUp} /> </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass StartStopButton extends React.Component {\r\n  //Ahem, no need constructor here as we won't declare any local state here. (I read the docs ðŸ˜Ž)\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div id=\"start_stop\" onClick={this.props.toggleStartStop} className=\"startStop-btn\">{this.props.isStart ? 'Stop' : 'Start'} <FontAwesomeIcon icon={this.props.playStopIcon} /></div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Time extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      time: this.props.time\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"display-pnl\">\r\n        <div style={this.props.color} id=\"timer-label\" className=\"current-session\">{this.props.status}</div>\r\n        <div style={this.props.alarmWarningColor} id=\"time-left\">{this.props.time}</div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <p>Coded and designed with <FontAwesomeIcon className=\"heart\" icon={faHeart} /> by <a href=\"https://github.com/CharaeKeow\" target=\"_blank\" rel=\"noopener noreferrer\" >Charae Keow</a>. </p>\r\n        <p>View the original source code on <a href=\"https://github.com/CharaeKeow/pomodoro-clock\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}